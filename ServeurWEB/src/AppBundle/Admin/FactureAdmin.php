<?php

namespace AppBundle\Admin;

use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use AppBundle\Entity\Action;
use Sonata\DoctrineORMAdminBundle\Filter\CallbackFilter;
use Doctrine\Common\Collections\ArrayCollection;
use Sonata\CoreBundle\Validator\ErrorElement;
use Sonata\AdminBundle\Form\Type\ModelAutocompleteType;
use AppBundle\Entity\Facture;
use getMailFactBundle\Entity\Status;
use \DateTime;
use Sonata\AdminBundle\Route\RouteCollection;
use AppBundle\Entity\Commentaire;
use Sonata\AdminBundle\Form\Type\Filter\ChoiceType;
use phpDocumentor\Reflection\Types\Boolean;
use AppBundle\Entity\SnowQueuNotification;

class FactureAdmin extends AbstractAdmin {
	private $statut;
	private $workflow;
	private $modDev;
	private $addrDev;
	private $addrAgentsTotal;
	private $mailer;
	private $utilisateur;
	public function __construct($code, $class, $baseControllerName, $statut, $workflow, $modDev, $addrDev, $addrAgentsTotal, $logger, \Swift_Mailer $mailer, $utilisateur) {
		$this->statut = $statut;
		$this->workflow = $workflow;
		parent::__construct ( $code, $class, $baseControllerName );
		$this->baseRouteName = $this->workflow->getBaseRouteName ( $this->statut );
		$this->baseRoutePattern = $this->workflow->getBaseRoutePattern ( $this->statut );
		$this->modDev = $modDev;
		$this->addrDev = $addrDev;
		$this->addrAgentsTotal = $addrAgentsTotal;
		$this->logger = $logger;
		$this->utilisateur = $utilisateur;
		$this->mailer = $mailer;
	}
	public function createQuery($context = 'list') {
		$query = null;
		$query = parent::createQuery ( $context ); // TODO: Change the autogenerated stub
		$query->leftJoin ( 'o.fournisseur', 'four' )->addSelect ( 'four' );
		$query->leftJoin ( 'o.affactureur', 'affactfour' )->addSelect ( 'four' );
		$query->leftJoin ( 'o.bon_livraisons', 'bon_livraisons' )->addSelect ( 'bon_livraisons' );
		$query->leftJoin ( 'o.bon_commandes', 'bon_commandes' )->addSelect ( 'bon_commandes' );
		if ($this->statut != 'ALL' && $this->statut != 'MAN' )
			$query->innerJoin ( 'o.step', 'step', 'WITH', 'step.code = :statut' )->addSelect ( 'step' );
		else
			$query->innerJoin ( 'o.step', 'step' )->addSelect ( 'step' );
		$query->setSortOrder ( 'DESC' );
		$query->setMaxResults ( 1 );
		
		try {
			
			
			if($this->statut === 'MANAPPRO') {
				// $query->innerJoin('o.approbation', 'approbation', 'with','approbation.approbateur = :approbateur and approbation.approuve = :approuve')->addSelect('approbation');
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$query->where ( "o.approbateur = :approbateur" );
				$query->setParameter ( 'approbateur', $ConnectedUser->getId () );
				$query->setParameter ( 'statut', 'FACTOAPP' );
				// $query->setParameter('approuve',false);
				$query->getFirstResult ();
			}
			
			if ($this->statut === 'MANCHBC' ) {
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$query->innerJoin ( 'o.affectationapprobation', 'user', 'with', 'user.id = :user' )-> // ->addSelect('user');
				setParameter ( 'statut', 'FACTOWAITBC' )->setParameter ( 'user', $ConnectedUser->getId () );				
				// $query->Where('user = :userdex');
				// $query->orWhere($query->expr()->isNull('user'));
				// $query->setParameter('userdex', $ConnectedUser->getId());
			
				$query->getFirstResult ();
			}
			
			if ($this->statut === 'FACTOAPP') {
				// $query->innerJoin('o.approbation', 'approbation', 'with','approbation.approbateur = :approbateur and approbation.approuve = :approuve')->addSelect('approbation');
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$query->where ( "o.approbateur = :approbateur" );
				$query->setParameter ( 'approbateur', $ConnectedUser->getId () );
				// $query->setParameter('approuve',false);
				$query->getFirstResult ();
			}
			if ($this->statut === 'FACTOWAITBC' ) {
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$query->innerJoin ( 'o.affectationapprobation', 'user', 'with', 'user.id = :user' )-> // ->addSelect('user');
setParameter ( 'statut', 'FACTOWAITBC' )->setParameter ( 'user', $ConnectedUser->getId () );
				// $query->Where('user = :userdex');
				// $query->orWhere($query->expr()->isNull('user'));
				// $query->setParameter('userdex', $ConnectedUser->getId());
				
				$query->getFirstResult ();
			}
			if ($this->statut === 'FACTOAPPALL') {
				$this->statut = 'FACTOAPP';
				
				$query->getFirstResult ();
			}
			if ($this->statut === 'FACTINLIALL') {
			    $this->statut = 'FACTINLI';
			    $query->getFirstResult ();
			}
			if ($this->statut === 'FACTINLIALL') {
			    $this->statut = 'FACTINLI';
			    $query->getFirstResult ();
			}
			if ($this->statut === 'FACTOWAITBCALL') {
				$this->statut = 'FACTOWAITBC';
				
				$query->getFirstResult ();
			}
			
		} catch ( Exception $ex ) {
		}
		
		try {
			
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			$isChefcomptable = false;
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "chef comptable")
						$isChefcomptable = true;
				}
			
			if (($this->statut === 'FACTOWRI' || $this->statut === 'FACTTOMAN') && ! $isChefcomptable) {
				$query->innerJoin ( 'o.affectation', 'affectation', 'with', 'affectation.id = :user' )->addSelect ( 'affectation' );
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$query->setParameter ( 'user', $ConnectedUser->getId () );
				
				$query->getFirstResult ();
			}
			if ($this->statut === 'FACTOWRIALL') {
				$this->statut = 'FACTOWRI';
				// $query->leftJoin('o.affectationapprobation', 'user');//->addSelect('user');
				// $ConnectedUser = $this->getConfigurationPool()->getContainer()->get('core.security')->getUser();
				// $query->where(
				// $query->expr()->orX(
				// $query->expr()->isNull('user.id'),
				// $query->expr()->eq('user', $ConnectedUser->getId())
				// )
				// );
				// $query->Where('user = :userdex');
				// $query->orWhere($query->expr()->isNull('user'));
				// $query->setParameter('userdex', $ConnectedUser->getId());
				
				$query->getFirstResult ();
			}
			if ($this->statut === 'FACTTOMANALL') {
			    $this->statut = 'FACTTOMAN';
			    // $query->leftJoin('o.affectationapprobation', 'user');//->addSelect('user');
			    // $ConnectedUser = $this->getConfigurationPool()->getContainer()->get('core.security')->getUser();
			    // $query->where(
			    // $query->expr()->orX(
			    // $query->expr()->isNull('user.id'),
			    // $query->expr()->eq('user', $ConnectedUser->getId())
			    // )
			    // );
			    // $query->Where('user = :userdex');
			    // $query->orWhere($query->expr()->isNull('user'));
			    // $query->setParameter('userdex', $ConnectedUser->getId());
			    
			    $query->getFirstResult ();
			}
		} catch ( Exception $ex ) {
		}
		if ($this->statut != 'ALL' && $this->statut != 'MAN' && $this->statut != 'MANAPPRO'  && $this->statut != 'MANCHBC')
			$query->setParameter ( 'statut', $this->statut );
		
		return $query;
	}
	public function getBatchActions() {
		$actions = parent::getBatchActions ();
		
		unset ( $actions ['delete'] );
		
		try {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "chef comptable") {
						
						$actions ['valide'] = array (
								'ask_confirmation' => true,
								'label' => 'Valider' 
						);
						$actions ['invalide'] = array (
								'ask_confirmation' => true,
								'label' => 'Invalider' 
						);
						$actions ['paye'] = array (
								'ask_confirmation' => true,
								'label' => 'Payer' 
						);
						$actions ['inpaye'] = array (
								'ask_confirmation' => true,
								'label' => 'Impayer' 
						);
					}
				}
			foreach ( $Groupes as $groupe ) {
				$droit = strtolower ( $groupe->getName () );
				if ($droit == "tresorier") {
					
					$actions ['valide'] = array (
							'ask_confirmation' => true,
							'label' => 'Valider' 
					);
					$actions ['invalide'] = array (
							'ask_confirmation' => true,
							'label' => 'Invalider' 
					);
					$actions ['paye'] = array (
							'ask_confirmation' => true,
							'label' => 'Payer' 
					);
					$actions ['inpaye'] = array (
							'ask_confirmation' => true,
							'label' => 'Impayer' 
					);
				}
			}
		} catch ( Exception $ex ) {
			$droit = "";
		}
		return $actions;
	}
	
	/**
	 *
	 * @param DatagridMapper $datagridMapper        	
	 */
	protected function configureDatagridFilters(DatagridMapper $datagridMapper) {
		$em = $this->modelManager->getEntityManager ( 'UserBundle\Entity\User' );
		
		$queryUser = $em->createQueryBuilder ( 'c' )->select ( 'c' )->from ( 'UserBundle:User', 'c' )->where ( 'c.username != :userAdmin' )->setParameter ( 'userAdmin', 'admin' )->orderBy ( 'c.lastname, c.firstname', 'ASC' );
		$datagridMapper
    		/*->add('libre',
                CallbackFilter::class,
                array(
                    'label'       => "Fournisseur",
                    'show_filter' => true,
                    'callback'    => array($this, 'freeSearch'),
                    'field_type'  => 'text'
                ))*/
        	->add ( 'fournisseur', 'doctrine_orm_model_autocomplete', array (
				'label' => 'Fournisseur',
				'show_filter' => true 
		), null, array (
				'property' => array (
						'name',
						'code' 
				),
				'callback' => function ($admin, $property, $value) {
					$datagrid = $admin->getDatagrid ();
					$queryBuilder = $datagrid->getQuery ();
					$queryBuilder->andWhere ( $queryBuilder->getRootAlias () . '.published=:numVal' )->setParameter ( 'numVal', '0' );
					$queryBuilder->andWhere ( $queryBuilder->expr ()->orX ( $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.name', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ), $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.code', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ) ) );
				},
				'to_string_callback' => function ($fournisseur, $property) {
					if ($fournisseur->getPublished () > 0) {
						return;
					}
					return ($fournisseur->getName ()) . ' (' . ($fournisseur->getCode () . ')');
				} 
		) )->add ( 'date_echeance', 'doctrine_orm_date_range', array (
				'label' => "Date échéance",
				'show_filter' => true 
		), 'sonata_type_date_range_picker', array (
				'field_options_start' => array (
						'format' => 'dd/MM/yyyy',
						'block_name' => 'hello' 
				),
				'field_options_end' => array (
						'format' => 'dd/MM/yyyy' 
				),
				'attr' => array (
						'class' => 'datepickerInline' 
				) 
		) )
           	/*->add('date_echeance', 'doctrine_orm_callback',  array(
                'label' => 'Date échéance',
                'callback' => function($queryBuilder, $alias, $field, $value) {
                    if (empty($value['value'])) { return; }

                    $date = $value['value'];
                    $queryBuilder->andWhere($alias.'.dateecheance BETWEEN :start AND :end');
                    $queryBuilder->setParameter('start', $date->start);
                    $queryBuilder->setParameter('end', $date->end);

                    return true;
                },
                'field_type' => 'sonata_type_date_range_picker',
                'field_options' => array(
                    'start_options' => array(
                        'years'           => range(2014, $now->format('Y')),
                        'dp_min_date'     => '12/1/2014',
                        'dp_max_date'     => $now->format('m/d/Y'),
                        'dp_default_date' => $now->format('m/d/Y'),
                        'dp_language'     => 'fr',
                        ),
                    'end_options' => array(
                        'years'           => range(2014, $now->format('Y')),
                        'dp_min_date'     => '12/1/2014',
                        'dp_max_date'     => $now->format('m/d/Y'),
                        'dp_default_date' => $now->format('m/d/Y'),
                        'dp_language'     => 'fr',
                        )
                )
            	)
            )*/
           	->add ( 'affectation', null, array (
				'label' => "Utilisateur",
				'query' => $queryUser,
				'show_filter' => true 
		) )->add ( 'created', 'doctrine_orm_date_range', array (
				'label' => "Date de création",
				'show_filter' => true 
		), 'sonata_type_date_range_picker', array (
				'field_options_start' => array (
						'format' => 'dd/MM/yyyy',
						'attr' => array (
								'class' => 'datepickerBen1' 
						) 
				),
				'field_options_end' => array (
						'format' => 'dd/MM/yyyy' 
				),
				'attr' => array (
						'class' => 'datepickerInline' 
				) 
		) )->add ( 'num_saisie', null, array (
				'label' => "Numéro de saisie",
				'show_filter' => true 
		) );
	}
	
	
	
	private function sendMail2($from,$dest,$message,$object,$facture){
	    $base=$this->getConfigurationPool ()->getContainer ()->getParameter('upload_destination');
	    $name=$facture->getFichier()->getName();
	    $pdf= $base.'/'.$name;
	    
	    $this->logger->info("Envoie mail à : ".$dest." - contenu: ".$message. " - attachement: ".$pdf. "- id_facture :".$facture->getId());
	    $mime_message = (new \Swift_Message($object))->setFrom($from)->setTo($dest)->setBody($message,"text/html")
	    ->attach(\Swift_Attachment::fromPath($pdf)->setFilename($name.'.pdf'));
	    $this->mailer->send($mime_message);
	}
	
	
	private function sendRedictedmail2($message,$object,$facture){
	    $from='sebgdf@gmail.com';
	    $dest=$this->getConfigurationPool ()->getContainer ()->getParameter('dest_snow');
	    $this->sendMail2($from,$dest,$message,$object,$facture);
	}
	
	/**
	 * @Route("/testsnow", name="testsnow")
	 */
	public function sendtosnow($facture)
	{
	    /*
	     * Mise à jour en registrement dans table
	     */
	$em=$this->modelManager->getEntityManager ( 'AppBundle\Entity\SnowQueuNotification' );
	    $notif=new SnowQueuNotification();
	    $notif->setFacture($facture);
	    $notif->setIssended(false);
	    $em->persist($notif);
	    $em->flush();
	   /*
	    * Désactivation de l'envoi vers SNOW
	    * 
	    * */
	   // $em=$this->modelManager->getEntityManager ();
	    
	 /*   $bonsdecommande=$em->getRepository('AppBundle\Entity\Bon_commande')
	    ->findBy(array('facture' => $facture));
	     
	    dump($bonsdecommande);
	    
	    die;
	    $message=$this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ('getMailFact/send_notification_to_snow.html.twig', array(
	        'facture' => $facture,
	        'bonsdecommandes' =>$bonsdecommande
	    ));
	    
	    $affectation=$facture->getAffectation();
	    if($affectation!=null)
	        $igg=$affectation->getUsername();
	    else
	        $igg=$this->getConfigurationPool ()->getContainer ()->getParameter('igg');
	    $name=$facture->getFichier()->getName();	    
	    $nom_societe=$this->getConfigurationPool ()->getContainer ()->getParameter('nom_societe');
	    $macro_processus=$this->getConfigurationPool ()->getContainer ()->getParameter('macro_processus');
	    $processus=$this->getConfigurationPool ()->getContainer ()->getParameter('processus');
	    $sous_processus=$this->getConfigurationPool ()->getContainer ()->getParameter('sous_processus');
	    $sous_sous_processus=$this->getConfigurationPool ()->getContainer ()->getParameter('sous_sous_processus');
	    $object='e:\\\\'.$igg.'\\\\La Reunion\\\\'.$nom_societe.'\\\\'.$macro_processus.'\\\\'.$processus.'\\\\'.$sous_processus.'\\\\'.$sous_sous_processus.'\\\\'.$name.'.pdf';
	    
	    $this->sendRedictedmail2($message,$object,$facture);
	    */
	    
	}
	
	
	/*
	 * public function freeSearch($queryBuilder, $alias, $field, $value)
	 * {
	 * if (!$value['value']) {
	 * return;
	 * }
	 * $queryBuilder->andWhere(
	 * $queryBuilder->expr()->orX(
	 * $queryBuilder->expr()->like('four.name', $queryBuilder->expr()->literal('%'.$value['value'].'%')),
	 * $queryBuilder->expr()->like('four.code', $queryBuilder->expr()->literal('%'.$value['value'].'%'))
	 * )
	 * );
	 * return true;
	 * }
	 */
	
	/**
	 *
	 * @param ListMapper $listMapper        	
	 */
	protected function configureListFields(ListMapper $listMapper) {
		try {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			$iscomptable = false;
			$istresorier = false;
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "chef comptable")
						$iscomptable = true;
				}
		} catch ( Exception $ex ) {
			$droit = "";
		}
		
		try {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "tresorier")
						$istresorier = true;
				}
		} catch ( Exception $ex ) {
			$droit = "";
		}
		
		if ($iscomptable) {
			$valideArray = array (
					'label' => 'Validée',
					'editable' => true 
			);
			$this->parameters = array (
					'listmapper' => array (
							'ischef' => true 
					) 
			);
		} else {
			$valideArray = array (
					'label' => 'Validée' 
			);
			$this->parameters = array (
					'listmapper' => array (
							'ischef' => false 
					) 
			);
		}
		
		if ($istresorier) {
			$payeArray = array (
					'label' => 'Payée',
					'editable' => true 
			);
		} else {
			$payeArray = array (
					'label' => 'Payée' 
			);
		}
		
		$listMapper->add ( 'fichier', null, [ 
				'label' => 'Fichier',
				'template' => 'AppBundle:Facture:facture_grid_fichier.html.twig' 
		] )->add ( 'fournisseur.name', null, [ 
				'label' => 'Fournisseur' 
		] )->add ( 'fournisseur.code', null, [ 
				'label' => 'Fournisseur Code' 
		] )->add ( 'name', null, [ 
				'label' => 'Numéro' 
		] )->add ( 'date_saisie', null, array (
				'format' => 'd/m/Y',
				'label' => 'Date de Facture' 
		) )->add ( 'date_echeance', null, [ 
				'label' => 'Date d\'échéance',
				'format' => 'd/m/Y' 
		] )->add ( 'num_saisie', null, [ 
				'label' => 'Numéro de saisie' 
		] )->add ( 'check_valide', null, $valideArray )->add ( 'check_paye', null, $payeArray )->
		// ->add('checkapprouve', null, array('label' => 'Approuvé ?','editable' => true))
		add ( 'created', null, [ 
				'label' => 'Création',
				'format' => 'd/m/Y' 
		] )->add ( 'affectation', 'string', array (
				'label' => 'Affectation',
				'template' => 'AppBundle:Facture:facture_grid_user.html.twig' 
		) )->add ( 'montant_ttc', null, [ 
				'label' => 'Montant TTC (€)' 
		] )->add ( '_action', null, array (
				'actions' => array (
						'show' => array (),
						'edit' => array (
								'template' => 'AppBundle:Facture:facture_list_editBtn.html.twig' 
						),
						'delete' => array (
								'template' => 'AppBundle:Facture:facture_list_deleteBtn.html.twig' 
						) 
				) 
		) );
	}
	
	
	public function securityAsGrantedAcces($rolename){
		$ConnectedUser=$this->getConfigurationPool ()->getContainer ()->get('core.security')->getUser();
		$Groupes = $ConnectedUser->getGroups();
		if($Groupes!==null)
			foreach ($Groupes as $groupe){
				//	if('super administrateur'===strtolower($groupe->getName()))
				//		return true;
				$roles=$groupe->getRoles();
				foreach ($roles as $role){
					if(strtolower($rolename) === strtolower($role))
						return true;
				}
		}
		return false;
	}
	
	
	/**
	 *
	 * @param FormMapper $formMapper        	
	 */
	protected function configureFormFields(FormMapper $formMapper) {
		try {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			$iscomptable = false;
			$istresorier = false;
			$isagentcomptable = false;
			
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "chef comptable")
						$iscomptable = true;
					if ($droit == "comptable" )
					    $isagentcomptable = true;
				}
		} catch ( Exception $ex ) {
			$droit = "";
		}
		
		try {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$Groupes = $ConnectedUser->getGroups ();
			if ($Groupes !== null)
				foreach ( $Groupes as $groupe ) {
					$droit = strtolower ( $groupe->getName () );
					if ($droit == "tresorier")
						$istresorier = true;
				}
		} catch ( Exception $ex ) {
			$droit = "";
		}
		
		if ($iscomptable) {
			$valideArray = array (
					'label' => 'Validée' 
			);
		} else {
			$valideArray = array (
					'label' => 'Validée',
					'disabled' => true 
			);
		}
		
		
		
		if ($isagentcomptable && ($this->statut === 'FACTOWRI' || $this->statut === 'FACTINLI')) {
		    $litigearray = array (
		        'label' => 'En litige'
		    );
		} else {
		    $litigearray = array (
		        'label' => 'En litige',
		        'disabled' => true
		    );
		}
		
		
		
		
		if ($istresorier) {
			$payeArray = array (
					'label' => 'Payée' 
			);
		} else {
			$payeArray = array (
					'label' => 'Payée',
					'disabled' => true 
			);
		}
		
		$em = $this->modelManager->getEntityManager ( 'UserBundle\Entity\User' );
		$emstep = $this->modelManager->getEntityManager ( 'WorkflowBundle\Entity\WorkflowStep' );
		$queryUser = $em->createQueryBuilder ( 'c' )->select ( 'c' )->from ( 'UserBundle:User', 'c' )->where ( 'c.username != :userAdmin' )->setParameter ( 'userAdmin', 'admin' )->orderBy ( 'c.lastname, c.firstname', 'ASC' );
		$querySteps = $emstep->createQueryBuilder ( 's' )->select ( 's' )->from ( 'WorkflowBundle:WorkflowStep', 's' );
		
		$queryDexUser = $em->createQueryBuilder ( 'c' )->select ( 'c' )->from ( 'UserBundle:User', 'c' )->Join ( 'c.groups', 'g' )->addSelect ( 'g' )->where ( 'g.name = :userdex' )->Andwhere ( 'c.username != :userAdmin' )->setParameter ( 'userAdmin', 'admin' )->setParameter ( 'userdex', 'Dex' )->orderBy ( 'c.lastname, c.firstname', 'ASC' );
		
		$formMapper->with ( 'Fichier', array (
				'class' => 'col-md-4' 
		) )->add ( 'fichier', 'sonata_type_admin', array (
				'label' => 'Facture PDF',
				'required' => true,
				'delete' => false,
				'attr' => array (
						'class' => 'FileMandatory pdfMandatory' 
				) 
		) )->end ()->

		with ( 'Obligatoire', array (
				'class' => 'col-md-4' 
		) )
	        	/*->add('fournisseur', 'sonata_type_model_autocomplete', array(
	        		'label' => 'Fournisseur', 
	        		'property' => array('name', 'code'), 
	        		'to_string_callback' => function($fournisseur, $property) {
			            return ($fournisseur->getName()).' ('.($fournisseur->getCode().')');
			        },
    				'callback' => function ($admin, $property, $value) {
                        $datagrid = $admin->getDatagrid();
                        $queryBuilder = $datagrid->getQuery();
                        $queryBuilder
                            ->andWhere($queryBuilder->getRootAlias() . '.published > 0')
                        ;
                        $datagrid->setValue($property, null, $value);
                    },
                ))*/
              	->add ( 'fournisseur', ModelAutocompleteType::class, array (
				'label' => 'Fournisseur',
				'property' => array (
						'name',
						'code' 
				),
				'to_string_callback' => function ($fournisseur, $property) {
					return ($fournisseur->getName ()) . ' (' . ($fournisseur->getCode () . ')');
				},
				'callback' => function ($admin, $property, $value) {
					$datagrid = $admin->getDatagrid ();
					$queryBuilder = $datagrid->getQuery ();
					$queryBuilder->andWhere ( $queryBuilder->getRootAlias () . '.published=:numVal' )->setParameter ( 'numVal', '0' );
					$queryBuilder->andWhere ( $queryBuilder->expr ()->orX ( $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.name', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ), $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.code', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ) ) );
				} 
		) )->add ( 'name', null, [ 
				'label' => 'Numéro' 
		] )->add ( 'date_saisie', 'sonata_type_date_picker', [ 
				'label' => 'Date de facture',
				'format' => 'dd/MM/yyyy' 
		] )->end ()
           	
           	
          /* 	$queryBuilder->andWhere(
            $queryBuilder->expr()->orX(
                $queryBuilder->expr()->like('four.name', $queryBuilder->expr()->literal('%'.$value['value'].'%')),
                $queryBuilder->expr()->like('four.code', $queryBuilder->expr()->literal('%'.$value['value'].'%'))
            )
        );*/
           	
           	->with ( 'Comptabilité', array (
				'class' => 'col-md-4' 
		) )->add ( 'num_compte_comptable', null, [ 
				'label' => 'Numéro Compte Comptable' 
		] )
            	/*->add('tva', null, ['label' => 'TVA'])*/
            	/*->add('centrecout', null, ['label' => 'Centre coût'])*/
           		/*->add('tva', ModelAutocompleteType::class, array(
	        		'label' => 'TVA', 
           			'required' => false,
	        		'property' => array('name','code'), 
                	'to_string_callback' => function($tva, $property) {
			            return ($tva->getName()).' ('.($tva->getCode().')');
			        },
                ))*/
           		->add ( 'tva', 'sonata_type_model', [ 
				'label' => 'TVA',
				'btn_add' => false,
				'required' => false 
		] )->add ( 'centrecout', ModelAutocompleteType::class, array (
				'label' => 'Centre coût',
				'required' => false,
				'property' => array (
						'name',
						'code' 
				),
				'to_string_callback' => function ($centrecout, $property) {
					return ($centrecout->getCode ()) . ' - ' . ($centrecout->getName ());
				} 
		) )->add ( 'montant_ttc', MoneyType::class, array (
				'label' => 'Montant TTC (€)',
				'required' => false,
				'currency' => 'EUR' 
		) )->add ( 'montant_ttc_usd', MoneyType::class, array (
				'label' => 'Montant TTC (USD)',
				'required' => false,
				'currency' => 'USD' 
		) )->end ()->

		with ( 'Autres informations', array (
				'class' => 'col-md-4' 
		) )->add ( 'affectation', 'sonata_type_model', array (
				'label' => 'Affectation',
				'query' => $queryUser,
				'btn_add' => false,
				'required' => false 
		) )->add ( 'date_echeance', 'sonata_type_date_picker', array (
				'label' => 'Date échéance',
				'required' => false,
				'format' => 'dd/MM/yyyy' 
		) )
	            /*->add('affactureur', 'sonata_type_model', array('label' => 'Affactureur','query' => $queryAffactureur, 'btn_add' => false, 'required' => false))*/
	            ->add ( 'affactureur', ModelAutocompleteType::class, array (
				'label' => 'Affactureur',
				'required' => false,
				'property' => array (
						'name',
						'code' 
				),
				'to_string_callback' => function ($affactureur, $property) {
					return ($affactureur->getName ()) . ' (' . ($affactureur->getCode () . ')');
				},
				'callback' => function ($admin, $property, $value) {
					$datagrid = $admin->getDatagrid ();
					$queryBuilder = $datagrid->getQuery ();
					$queryBuilder->andWhere ( $queryBuilder->getRootAlias () . '.published=:numVal' )->setParameter ( 'numVal', '1' );
					$queryBuilder->andWhere ( $queryBuilder->expr ()->orX ( $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.name', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ), $queryBuilder->expr ()->like ( $queryBuilder->getRootAlias () . '.code', $queryBuilder->expr ()->literal ( '%' . $value . '%' ) ) ) );
				} 
		) )->add ( 'num_saisie', null, [ 
				'label' => 'Numéro de saisie' 
		] )->add ( 'num_ordre', null, [ 
				'label' => 'Numéro d\'ordre' 
		] );
		
		$formMapper->end ()->with ( 'Approbation', array (
				'class' => 'col-md-4' 
		) );
		
		if ($this->statut === 'MAN' && $this->securityAsGrantedAcces("ROLE_APP_ADMIN_FACTUREMANSTATUT_ALL")){
			
					
			$formMapper->end ()->add ( 'step', 'sonata_type_model', array (
				'label' => 'Statut',
				'query' => $querySteps,
				'btn_add' => false,
				'required' => false 
		) );
		}
		
		if ($this->statut === 'FACTOAPP' || $this->statut === 'FACTOAPPALL') {
			$formMapper->add ( 'checkapprouve', 'choice', array (
					'choices' => [ 							
							'Approbation acceptée' => true,
							'Approbation refusée' => false,
							'-' => ''
					],
					'label' => 'Approbation',
					'data' =>''
			) );
			// $formMapper->add('checknonapprouve', null, ['label' => 'Approbation refusée']);
			$formMapper->add ( 'commentairapprobation', null, [ 
					'label' => 'Commentaire' 
			] );
		}
		if ($this->statut === 'FACTOWRI' || $this->statut === 'FACTOWRIALL' || $this->statut === 'MAN' || $this->statut === 'MANAPPRO') {
			if($this->securityAsGrantedAcces("ROLE_APP_ADMIN_FACTUREMANAPP_ALL")){
			$formMapper->add ( 'approbation', 'sonata_type_collection', array (
					'by_reference' => false,
					'required' => false 
			
			) // !important
, array (
					'edit' => 'inline',
					'inline' => 'table' 
			) );}
		}
		
		$formMapper->end ();
		if($this->securityAsGrantedAcces("ROLE_APP_ADMIN_FACTUREMANBC_ALL") || $this->securityAsGrantedAcces("ROLE_APP_ADMIN_FACTUREMANCHGBC_ALL")){
		$formMapper->with ( 'Bon de Commande', array (
				'class' => 'col-md-4' 
		) )->add ( 'check_bc', null, [ 
				'label' => 'Bon de commande Obligatoire' 
		] )->add ( 'affectationapprobation', 'sonata_type_model', array (
				'label' => 'Affectation',
				'query' => $queryDexUser,
				'btn_add' => false,
				'required' => false 
		) );
				 
	            /*->add('bon_commandes', 'sonata_type_model', array(
			            'class' => 'AppBundle\Entity\Bon_commande',
	            		'multiple' => true,
			            'property' => 'name',
	            		'label' => 'Bon de commande'
			        ))
			        */
		$formMapper->add ( 'bon_commandes', 'sonata_type_collection', array (
				'by_reference' => false,
				'required' => false 
		) // !important
, array (
				'edit' => 'inline',
				'inline' => 'table' 
		) )->end ();
		
		}
		
		$formMapper->

		with ( 'Bon de Livraison', array (
				'class' => 'col-md-4' 
		) )->add ( 'check_bl', null, [ 
				'label' => 'Bon de livraison Obligatoire' 
		] )
	            /*->add('bon_livraisons', 'sonata_type_model', array(
			            'class' => 'AppBundle\Entity\Bon_livraison',
	            		'multiple' => true,
			            'property' => 'name',
	            		'label' => 'Bon de livraison'
			        ))*/
	            ->add ( 'bon_livraisons', 'sonata_type_collection', array (
				'by_reference' => false, // !important
				'required' => false 
		), array (
				'edit' => 'inline',
				'inline' => 'table' 
		) )->end ()->

		with ( 'Validation', array (
				'class' => 'col-md-4' 
		) )->add ( 'check_valide', null, $valideArray )->add ( 'check_paye', null, $payeArray )->end ()->

		
		with ( 'Litige', array (
		    'class' => 'col-md-4'
		) )->add ( 'litige', null, $litigearray )->end () ->
		
		
		
		with ( 'Commentaires', array (
				'class' => 'col-md-8' 
		) )->add ( 'commentaires', 'sonata_type_collection', array (
				'by_reference' => false,
				'required' => false 
		), array (
				'edit' => 'inline',
				'inline' => 'table' 
		) )->end ()
            
			/*->with('Etiquettes', array('class' => 'col-md-8'))
			->add('etiquettes', 'sonata_type_model',/* array(
					'by_reference' => false,
					'required' => false
			), array(
					'edit' => 'inline',
					'inline' => 'table'
			)array('label' => 'Affectation','query' => $queryUser, 'btn_add' => false, 'required' => false))*/
			->end ();
	}
	public function getTemplate($name) {
		switch ($name) {
			case 'edit' :
				return 'AppBundle:Facture:facture_edit.html.twig';
				break;
			case 'show' :
				return 'AppBundle:Facture:facture_show.html.twig';
				break;
			case 'list' :
				return 'AppBundle:Facture:facture_list.html.twig';
				break;
			default :
				return parent::getTemplate ( $name );
				break;
		}
	}
	
	/**
	 *
	 * @param ShowMapper $showMapper        	
	 */
	protected function configureShowFields(ShowMapper $showMapper) {
		$showMapper->with ( 'Données Obligatoires', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-danger' 
		) )->add ( 'fichier' )->add ( 'created', null, array (
				'label' => 'Date d\'arrivée',
				'format' => 'd/m/Y' 
		) )->add ( 'createur', 'entity', array (
				'class' => 'UserBundle\Entity\User',
				'property' => array (
						'firstName',
						'lastName' 
				) 
		) )->add ( 'name', null, array (
				'label' => 'Numéro de facture' 
		) )->
		// ->add('fichier', 'fichier', array('label' => 'UserName', 'prefix' => '/'))
		add ( 'fournisseur.name', null, array (
				'label' => 'Fournisseur' 
		) )->add ( 'date_saisie', null, array (
				'label' => 'Date de facture',
				'format' => 'd/m/Y' 
		) )->end ()->

		with ( 'Informations Comptabilité', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-warning' 
		) )->add ( 'affactureur.name', null, array (
				'label' => 'Affactureur' 
		) )->add ( 'num_compte_comptable', null, array (
				'label' => 'Numéro compte Comptable' 
		) )->add ( 'tva', null, array (
				'label' => 'TVA' 
		) )->add ( 'centre_cout', null, array (
				'label' => 'Centre coût' 
		) )->add ( 'montant_ttc', null, array (
				'label' => 'Montant TTC (€)' 
		) )->add ( 'montant_ttc_usd', null, array (
				'label' => 'Montant TTC (USD)' 
		) )->end ()->

		with ( 'Autres informations', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-warning' 
		) )->add ( 'affectation', null, array (
				'label' => 'Affectation' 
		) )->add ( 'date_echeance', null, array (
				'label' => 'Date échéance',
				'format' => 'd/m/Y' 
		) )->add ( 'num_saisie', null, array (
				'label' => 'Numéro de saisie' 
		) )->add ( 'num_ordre', null, array (
				'label' => 'Numéro d\'ordre' 
		) )->end ()->

		with ( 'Les Bons de Commandes', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-success' 
		) )->add ( 'check_bc', null, array (
				'label' => 'Bon de commande Obligatoire ?' 
		) )->add ( 'bon_commandes', null, array (
				'label' => 'Bons de commandes',
				'template' => 'AppBundle:Facture:facture_grid_bc.html.twig' 
		) )->end ()->

		with ( 'Les Bons de Livraisons', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-success' 
		) )->add ( 'check_bl', null, array (
				'label' => 'Bon de livraison Obligatoire ?' 
		) )->add ( 'bon_livraisons', null, [ 
				'label' => 'Bons de livraisons',
				'template' => 'AppBundle:Facture:facture_grid_bl.html.twig' 
		] )->end ()->

		with ( 'Commentaires', array (
				'class' => 'col-md-12 tobemoved',
				'box_class' => 'box box-solid box-success' 
		) )->add ( 'commentaires', null, array (
				'label' => false,
				'template' => 'AppBundle:Facture:facture_show_commentaires.html.twig' 
		) )->end ()->with ( 'Validation', array (
				'class' => 'col-md-12',
				'box_class' => 'box box-solid box-danger' 
		) )->

		add ( 'check_valide', null, array (
				'label' => 'Validé' 
		) )->
		add ( 'litige', null, array (
		    'label' => 'En litige'
		) )		
		->add ( 'check_paye', null, array (
				'label' => 'Payé' 
		) )->end ();

		
	}
	private function getStatusByCode($code) {
		try {
			$em = $this->modelManager->getEntityManager ( 'getMailFactBundle\Entity\Status' );
			$query = $em->createQuery ( "select a from getMailFactBundle:status a where replace(upper(a.code),' ','') = :code" );
			$query->setParameter ( 'code', strtoupper ( $code ) );
			$status = $query->getSingleResult ();
			return $status;
		} catch ( \Doctrine\ORM\NoResultException $e ) {
			return null;
		}
	}
	private function getStepByCode($code) {
		try {
			$em = $this->modelManager->getEntityManager ( 'WorkflowBundle\Entity\WorkflowStep' );
			$query = $em->createQuery ( "select a from WorkflowBundle:WorkflowStep a where replace(upper(a.code),' ','') = :code" );
			$query->setParameter ( 'code', strtoupper ( $code ) );
			$step = $query->getSingleResult ();
			return $step;
		} catch ( \Doctrine\ORM\NoResultException $e ) {
			return null;
		}
	}
	
	// Calcul de la date d'échéance
	private function calculerDateEcheance(Facture $facture) {
		$date = new DateTime ();
		$dernierJourMois = $date->format ( 't-m-Y' );
		$fournisseurDelai = $facture->getFournisseur ()->getDelaiDateEcheance ();
		$dateStr = date ( 'd-m-Y', strtotime ( "+$fournisseurDelai days", strtotime ( $dernierJourMois ) ) );
		$dateEcheance = date_create_from_format ( 'd-m-Y', $dateStr );
		$dateEcheance->setTime ( 0, 0, 0 );
		return $dateEcheance;
	}
	private function AskApprobation($facture) {
		$this->logger->info ( "Traitement demande approbation" );
		$url = $this->getConfigurationPool ()->getContainer ()->get ( 'router' )->generate ( 'admin_app_factureaapprouver_edit', array (
				'id' => $facture->getId () 
		) );
		$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
		$message = $this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ( 'Ask_approbation.html.twig', array (
				'nfacture' => $facture->getName (),
				'nomfournisseur' => $facture->getFournisseur ()->getName (),
				'prenom' => $facture->getApprobateur ()->getFirstname (),
				'id' => $facture->getId (),
				'nomapprobateur' => $this->getFirstLastname ( $ConnectedUser ) 
		) );
		$object = 'Demande d\'approbation';
		$this->sendRedictedmail ( $message, $object, $facture->getApprobateur ()->getEmail () );
	}
	private function AskBC($facture) {
		$this->logger->info ( "Traitement demande de bon de commande" );
		$url = $this->getConfigurationPool ()->getContainer ()->get ( 'router' )->generate ( 'admin_app_factureaapprouver_edit', array (
				'id' => $facture->getId () 
		) );
		$message = $this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ( 'Ask_BC.html.twig', array (
				'nfacture' => $facture->getName (),
				'nomfournisseur' => $facture->getFournisseur ()->getName (),
				'prenom' => $facture->getAffectationapprobation () ? $facture->getAffectationapprobation () : "",
				'id' => $facture->getId () 
		) );
		$object = 'Demande de bon de commande';
		$this->sendRedictedmail ( $message, $object, $facture->getAffectationapprobation () ? $facture->getAffectationapprobation ()->getEmail () : "" );
	}
	private function BCSended($facture) {
		$this->logger->info ( "Bon de commande transmis" );
		$url = $this->getConfigurationPool ()->getContainer ()->get ( 'router' )->generate ( 'admin_app_factureasaisir_edit', array (
				'id' => $facture->getId () 
		) );
		
		$message = $this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ( 'facture_bc_added.twig', array (
				'nfacture' => $facture->getName (),
				'nomfournisseur' => $facture->getFournisseur ()->getName (),
				'prenom' => $facture->getAffectation ()->getFirstname (),
				'id' => $facture->getId () 
		) );
		$object = 'Bon de commande enregistré';
		$this->sendRedictedmail ( $message, $object, $facture->getAffectation ()->getEmail () );
	}
	private function refuseApprobation($facture) {
		$this->logger->info ( "refus approbation" );
		$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
		$commentairenonapprob = $facture->getCommentairapprobation ();
		
		$message = $this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ( 'refuse_approbation.html.twig', array (
				'nfacture' => $facture->getName (),
				'nomfournisseur' => $facture->getFournisseur ()->getName (),
				'prenom' => $facture->getAffectation ()->getFirstname (),
				'id' => $facture->getId (),
				'commentairenonapprob' => $commentairenonapprob,
				'nomapprobateur' => $this->getFirstLastname ( $ConnectedUser ) 
		) );
		$object = 'Refus d\'approbation';
		$this->sendRedictedmail ( $message, $object, $facture->getAffectation ()->getEmail () );
	}
	private function getFirstLastname($user) {
		return (($user->getFirstname ()) ? (substr ( $user->getFirstname (), 0, 1 )) : '') . '. ' . (($user->getLastname ()) ? (substr ( $user->getLastname (), 0, 10 )) : '');
	}
	private function AccepteApprobation($facture) {
		$this->logger->info ( "Facture Approuvée" );
		$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
		$message = $this->getConfigurationPool ()->getContainer ()->get ( 'templating' )->render ( 'accept_approbation.html.twig', array (
				'nfacture' => $facture->getName (),
				'nomfournisseur' => $facture->getFournisseur ()->getName (),
				'prenom' => $facture->getAffectation ()->getFirstname (),
				'id' => $facture->getId (),
				'nomapprobateur' => $this->getFirstLastname ( $ConnectedUser ) 
		) );
		$object = 'Facture Approuvée';
		$this->sendRedictedmail ( $message, $object, $facture->getAffectation ()->getEmail () );
	}
	private function sendMail($dest, $message, $object) {
		$this->logger->info ( "Envoie mail à : " . $dest . " - contenu: " . $message );
		$mime_message = (new \Swift_Message ( $object ))->setFrom ( $this->utilisateur )->setTo ( $dest )->setBody ( $message, "text/html" );
		$this->mailer->send ( $mime_message );
	}
	private function sendRedictedmail($message, $object, $to) {
		if ($this->modDev)
			$this->sendMail ( $this->addrDev, $message, $object );
		else {
			$this->sendMail ( $to, $message, $object );
		}
	}
	

	public function preUpdate($facture) {
		$action = new Action ();
		$container = $this->getConfigurationPool ()->getContainer ();
		$oldcode = $facture->getStep ()->getCode ();
		$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
		if ($this->statut !== 'MAN'  && $this->statut != 'MANAPPRO'  && $this->statut != 'MANCHBC'){
		if($facture->getCheckapprouve ()!==''){
		
		
		// On crée un objet Advert  
		
		
		if ($oldcode === 'FACTOAPP') {
			
			// Si l'approbateur pas dans liste:
			// Si approuvé on signe
			// on acheck approuvé pour tous les approbateurs et salut
			
			// Sinon si approbateur dans liste;
			if ($facture->getCheckapprouve ()) {
				
				$facture->UserSetApprobation ( $ConnectedUser, $facture->getCheckapprouve () );
				if ($facture->setNextApprobateur ())
					$this->AskApprobation ( $facture );
				$this->signer ( $facture, $ConnectedUser, $facture->getRank ( $ConnectedUser ) );
				
                
				
				//if ($approbation->getApprobateur ()->getId () === $ConnectedUser->getId ())
				{
					$commentaire = $facture->getCommentairapprobation();
					$newcommentaire = new Commentaire ();
					$now = new \DateTime ();
					$newcommentaire->setContent ( "Approbation acceptée le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . " \n Motif : " . ($commentaire ? $commentaire : "N/A") );
					$newcommentaire->setFacture ( $facture );
					$newcommentaire->setUser ( $ConnectedUser );
					$facture->getCommentaires ()->add ( $newcommentaire );
				
				}
			} else {
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				// Envoie mail vers compta pour action car non approuvé
				$facture->saveApprobation ();
				$this->refuseApprobation ( $facture );
				// Ajout Commentaire sur fature				
					$commentairenonapprob = $facture->getCommentairapprobation();
					$newcommentaire = new Commentaire ();
					$now = new \DateTime ();
					$newcommentaire->setContent ( "Approbation refusée le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . " \n Motif : " . ($commentairenonapprob ? $commentairenonapprob : "N/A") );
					$newcommentaire->setFacture ( $facture );
					$newcommentaire->setUser ( $ConnectedUser );
					$facture->getCommentaires ()->add ( $newcommentaire );
				
				}
			}
		}
		
		$facture->saveApprobation ();
		$stepDestination = $this->workflow->manageStatus ( $facture->getStep ()->getCode (), $facture );
		
		$facture->setCheckapprouve ( $facture->getAllapproved () );
		$action->setName ( 'Modification' );
		$action->setUser ( $container->get ( 'core.security' )->getUser () );
		
		
		if ($stepDestination !== null && $stepDestination->getCode () === 'FACTTOMAN') {
		   // $this-$sendtosnow=true;
		 $this->sendtosnow($facture);
		}
		if ($stepDestination !== null && $stepDestination->getCode () === 'FACTOWAITBC') {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$this->AskBC ( $facture );
			$newcommentaire = new Commentaire ();
			$now = new \DateTime ();
			
			$newcommentaire->setContent ( "Demande de n° de bon de commande le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . (($facture->getAffectationapprobation ()) ? " à " . $this->getFirstLastname ( $facture->getAffectationapprobation () ) . " \n" : "") );
			$newcommentaire->setFacture ( $facture );
			$newcommentaire->setUser ( $ConnectedUser );
			$facture->getCommentaires ()->add ( $newcommentaire );
		}
		if ($stepDestination !== null && $stepDestination->getCode () === 'FACTOWRI' && $oldcode === 'FACTOWAITBC') {
			$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
			$this->BCSended ( $facture );
			$newcommentaire = new Commentaire ();
			$now = new \DateTime ();
			$newcommentaire->setContent ( "Numéro de bon de commande enregistré le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . " \n" );
			$newcommentaire->setFacture ( $facture );
			$newcommentaire->setUser ( $ConnectedUser );
			$facture->getCommentaires ()->add ( $newcommentaire );
		}
		
		if ($stepDestination !== null && $stepDestination->getCode () === 'FACTOAFF') {
			$facture->setCreated ( new \DateTime () );
			$facture->setDateEcheance ( $this->calculerDateEcheance ( $facture ) );
		}
		
		if ($stepDestination !== null && $stepDestination->getCode () === 'FACTOAPP') {
			$facture->setNextApprobateur ();
			$this->AskApprobation ( $facture );
		}
		if ($facture->getAllapproved () && $stepDestination !== null && $stepDestination->getCode () === 'FACTOWRI' && $oldcode === 'FACTOAPP') {
			$this->AccepteApprobation ( $facture );
		}
		/*
		 * if($facture->getCheckPaye() && $facture->getStep()->getCode() === 'FACTOPAY')
		 * {
		 * //$this->AskApprobation($facture->getNextApprobateur());
		 * }
		 */
		
		$facture->addAction ( $action );
		}else{
			$oldcode = $facture->getStep ()->getCode ();
			if ($oldcode === 'FACTOAPP') {
				if ($facture->setNextApprobateur ())
					$this->AskApprobation ( $facture );
				$facture->saveApprobation ();
				$newcommentaire = new Commentaire ();
				$now = new \DateTime ();
					
				$newcommentaire->setContent ( "Demande d'approbation le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . (($facture->getApprobateur() ) ? " à " . $this->getFirstLastname ( $facture->getApprobateur()  ) . " \n" : "") );
				$newcommentaire->setFacture ( $facture );
				$newcommentaire->setUser ( $ConnectedUser );
				$facture->getCommentaires ()->add ( $newcommentaire );
			}
			
			if ($oldcode === 'FACTOWAITBC') {
				$ConnectedUser = $this->getConfigurationPool ()->getContainer ()->get ( 'core.security' )->getUser ();
				$this->AskBC ( $facture );
				$newcommentaire = new Commentaire ();
				$now = new \DateTime ();
					
				$newcommentaire->setContent ( "Demande de n° de bon de commande le " . ($now->format ( 'Y-m-d' )) . " par " . $this->getFirstLastname ( $ConnectedUser ) . (($facture->getAffectationapprobation ()) ? " à " . $this->getFirstLastname ( $facture->getAffectationapprobation () ) . " \n" : "") );
				$newcommentaire->setFacture ( $facture );
				$newcommentaire->setUser ( $ConnectedUser );
				$facture->getCommentaires ()->add ( $newcommentaire );
			
		
		}
		}
	}
	public function signer($facture, $user, $place) {
		
		// Convertir fichier en version 1.4
		global $kernel;
		if ('AppCache' === get_class ( $kernel )) {
			$kernel = $kernel->getKernel ();
		}
		
		$rootDir = $kernel->getContainer ()->getparameter ( 'kernel.root_dir' );
		$addr = $kernel->getContainer ()->getparameter ( 'sonata_media.cdn.host' );
		$fnameorigine = $facture->getFichier ()->getName ();
		$fnameEnd = $fnameorigine . '_t';
		$fileor = $rootDir . '/../web/' . $addr . '/' . $fnameorigine;
		$file = $rootDir . '/../web/' . $addr . '/' . $fnameorigine . 'tmp';
		
		$realfileor = realpath ( $fileor );
		$commande = 'mv ' . str_replace ( ' ', '\ ', $realfileor ) . ' ' . str_replace ( ' ', '_', $realfileor );
		system ( $commande );
		$realfileor = str_replace ( ' ', '_', $realfileor );
		$realfile = $realfileor . 'tmp';
		$fileEnd = $rootDir . '/../web/' . $addr . '/' . $fnameEnd;
		$file = str_replace ( ' ', '_', $file );
		system ( 'gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.5 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=' . $realfile . ' ' . $realfileor );
		
		$pdf = new \setasign\Fpdi\Fpdi ();
		$pagecount = $pdf->setSourceFile ( $file );
		
		for($i = 1; $i <= $pagecount; $i ++) {
			$tplid = $pdf->importPage ( $i );
			$size = $pdf->getTemplateSize ( $tplid );
			$pdf->AddPage ( $size ['orientation'] );
			
			$width = $size ['width'] + 50;
			$heigth = 110; // $size['height'];
			$pdf->setFont ( 'Times', '', 11 );
			$pdf->useTemplate ( $tplid );
			$pdf->SetTextColor ( 255, 0, 0 );
			// $pdf->SetDrawColor(255,0,0);
			if ($place === 0) {
				
				// $pdf->SetXY(($width-140)+1,($heigth-90)-2);
				
				$pdf->SetXY ( ($width - 140) + 2, ($heigth - 90) + 6 );
				// $pdf->SetTextColor(51,102,204);
				$now = new \DateTime ();
				$pdf->Write ( 8, 'Approuvee par ' . $this->getFirstLastname ( $user ) . ' le ' . ($now->format ( 'Y-m-d' )) );
				// $pdf->SetTextColor(255,0,0);
				$pdf->SetXY ( ($width - 140) + 2, ($heigth - 90) + 10 );
				
				if ($facture->getApprobation ()) {
					foreach ( $facture->getApprobation () as $approbation ) {
						if ($approbation->getApprobateur ()->getId () === $user->getId ())
						{$pdf->Write ( 8, substr ( $approbation->getCommentaire ()->getContent (), 0, 10 ) );
							
							
						}	
					}
				}
			} else {
				$now = new \DateTime ();
				$pdf->SetXY ( ($width - 140) + 2, ($heigth - 90) + 6 + (5 * $place) + 3 );
				$pdf->SetTextColor ( 255, 0, 0 );
				$pdf->Write ( 8, 'Approuvee par ' . $this->getFirstLastname ( $user ) . ' le ' . ($now->format ( 'Y-m-d' )) );
				// $pdf->SetTextColor(255,0,0);
				$pdf->SetXY ( ($width - 140) + 2, ($heigth - 90) + 6 + ((5 * $place) + 6) );
				if ($facture->getApprobation ()) {
					foreach ( $facture->getApprobation () as $approbation ) {
						if ($approbation->getApprobateur ()->getId () === $user->getId ())
						{$pdf->Write ( 8, substr ( $approbation->getCommentaire ()->getContent (), 0, 10 ) );
							
						}
					}
				}
			}
		}
		
		$facture->getFichier ()->setName ( $fnameEnd );
		$em = $this->modelManager->getEntityManager ( 'AppBundle\Entity\Facture' );
		$em->persist ( $facture );
		$em->flush ();
		
		$pdf->Output ( 'F', $fileEnd );
		
		$pdf->Close ();
		
		return $this;
	}
	public function prePersist($facture) {
		$container = $this->getConfigurationPool ()->getContainer ();
		// On crée un objet Advert
		$action = new Action ();
		$action->setName ( 'Ajout' );
		$action->setUser ( $container->get ( 'core.security' )->getUser () );
		
		$facture->setCreateur ( $container->get ( 'core.security' )->getUser () );
		
		$nameFournisseur = str_replace ( " ", "", (str_replace ( "_", "", $facture->getFournisseur () )) );
		$numFact = str_replace ( " ", "", (str_replace ( "_", "", $facture )) );
		$date = $facture->getDateSaisie ()->format ( 'dmY' );
		$facture->getFichier ()->setName ( "Facture_" . $nameFournisseur . "_" . $numFact . "_" . $date );
		
		$facture->addAction ( $action );
		
		$stepDestination = $this->workflow->manageStatus ( $this->statut, $facture );
		
		$this->logger->info ( "pre persist" );
		/* if($this->sendtosnow){
		 $this->sendtosnow($facture);
		 $this->sendtosnow=false;
		 }*/
	}
	
	/* EXPORT */
	public function getExportFields() {
		return [ 
				'Founisseur [Nom]' => 'fournisseur.name',
				'Founisseur [Code]' => 'fournisseur.code',
				'Numéro' => 'name',
				'Date de facture' => 'date_saisie',
				'Date échéance' => 'date_echeance',
				'Numéro de saisie' => 'num_saisie',
				'Affectation' => 'affectation',
				'Affactureur' => 'affactureur.name',
				'Numéro d\'ordre' => 'num_ordre',
				'Numéro Compte Comptable' => 'num_compte_comptable',
				'TVA' => 'tva.name',
				'Centre Coût' => 'centrecout.name',
				'Montant TTC (€)' => 'montant_ttc',
				'Montant TTC (USD)' => 'montant_ttc_usd',
				'Validée' => 'check_valide',
				'Payée' => 'check_paye' 
		];
	}
	protected function configureRoutes(RouteCollection $collection) {
		if ($this->statut !== 'INIT')
			$collection->remove ( 'create' );
	}
	public function getDataSourceIterator() {
		$iterator = parent::getDataSourceIterator ();
		$iterator->setDateTimeFormat ( 'd/m/Y' ); // change this to suit your needs
		return $iterator;
	}
	public function getStatut() {
		return $this->statut;
	}
}
