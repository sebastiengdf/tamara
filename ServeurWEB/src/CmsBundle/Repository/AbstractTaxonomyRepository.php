<?php

namespace CmsBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * AbstractTaxonomyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractTaxonomyRepository extends BaseRepository
{
    /**
     * @param array $criterias
     * @param array $orders
     * @param array $numbers
     * @param array $options
     * @return QueryBuilder
     */
    public function findMany($criterias = array(), $orders = array(), $numbers = array(), $options = array())
    {
        $qb = $this->createQueryBuilder('o');

        if (isset($criterias['published'])) {
            $qb->andWhere('o.published = :published')->setParameter('published', $criterias['published']);
            $qb->andWhere('o.publishedStart < :publishedStart')->setParameter('publishedStart', new \DateTime('now'));
        }

        return $qb;
    }

    /**
     * @param array $criterias
     * @param array $options
     * @return QueryBuilder
     */
    public function findOne($criterias = array(), $options = array())
    {
        $qb = $this->createQueryBuilder('o');

        if (isset($criterias['slug'])) {
            $qb->andWhere('o.slug=:slug')->setParameter('slug', $criterias['slug']);
        }

        if (isset($criterias['published'])) {
            $qb->andWhere('o.published = :published')->setParameter('published', $criterias['published']);
            $qb->andWhere('o.publishedStart < :publishedStart')->setParameter('publishedStart', new \DateTime('now'));
        }

        if(isset($options['offset']) and isset($options['limit'])) {
            $qb->leftJoin('o.items', 'items')->addSelect('items');

            $qb->setFirstResult($options['offset']);
            $qb->setMaxResults($options['limit']);
        }

        // orders
        if (empty($orders) and !isset($options['top'])) {
            $qb->orderBy('items.position', 'DESC');
        } else {
            foreach ($orders as $key => $value) {
                $qb->orderBy('o.'.$key, $value);
            }
        }

        return $qb;
    }
}
