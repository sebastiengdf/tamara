<?php

namespace CmsBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LinkRepository extends NestedTreeRepository
{

    public function getNodes($rootLink)
    {

        $qb = $this
            ->createQueryBuilder('link')
            ->leftJoin('link.children', 'children')->addSelect('children')
            ->leftJoin('link.attributes', 'attributes')->addSelect('attributes')
            ->leftJoin('link.childrenAttributes', 'childrenAttributes')->addSelect('childrenAttributes')
            ->leftJoin('link.linkAttributes', 'linkAttributes')->addSelect('linkAttributes')
            ->leftJoin('link.linkParams', 'linkParams')->addSelect('linkParams')
            ->leftJoin('link.routeArgs', 'routeArgs')->addSelect('routeArgs')
            ->leftJoin('link.page', 'page')->addSelect('page')
            ->leftJoin('link.translations', 'translations')->addSelect('translations')
            ->leftJoin('page.folder', 'pageFolder')->addSelect('pageFolder')
            ->leftJoin('page.translations', 'pageTranslation')->addSelect('pageTranslation')
            ->leftJoin('link.parent', 'parent')->addSelect('parent')
            ->where('link.root = :root')->setParameter('root', $rootLink)
            ->orderBy('link.lft', 'ASC')->addOrderBy('link.lvl', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

}
